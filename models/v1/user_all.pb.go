// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user_all.proto

package v1

import (
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserAll struct {
	// Types that are valid to be assigned to OneofType:
	//	*UserAll_Registration
	//	*UserAll_DocUpload
	//	*UserAll_Login
	//	*UserAll_MoneyDeposit
	//	*UserAll_TableStart
	//	*UserAll_HandPlayed
	//	*UserAll_Bet
	//	*UserAll_MoneyWithdraw
	//	*UserAll_BonusReceived
	OneofType            isUserAll_OneofType `protobuf_oneof:"oneof_type"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *UserAll) Reset()         { *m = UserAll{} }
func (m *UserAll) String() string { return proto.CompactTextString(m) }
func (*UserAll) ProtoMessage()    {}
func (*UserAll) Descriptor() ([]byte, []int) {
	return fileDescriptor_3088961682bd11de, []int{0}
}

func (m *UserAll) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserAll.Unmarshal(m, b)
}
func (m *UserAll) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserAll.Marshal(b, m, deterministic)
}
func (m *UserAll) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAll.Merge(m, src)
}
func (m *UserAll) XXX_Size() int {
	return xxx_messageInfo_UserAll.Size(m)
}
func (m *UserAll) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAll.DiscardUnknown(m)
}

var xxx_messageInfo_UserAll proto.InternalMessageInfo

type isUserAll_OneofType interface {
	isUserAll_OneofType()
}

type UserAll_Registration struct {
	Registration *UserRegistered `protobuf:"bytes,1,opt,name=registration,proto3,oneof"`
}

type UserAll_DocUpload struct {
	DocUpload *UserDocumentUploaded `protobuf:"bytes,2,opt,name=doc_upload,json=docUpload,proto3,oneof"`
}

type UserAll_Login struct {
	Login *UserLoggedIn `protobuf:"bytes,3,opt,name=login,proto3,oneof"`
}

type UserAll_MoneyDeposit struct {
	MoneyDeposit *UserMoneyDeposited `protobuf:"bytes,4,opt,name=money_deposit,json=moneyDeposit,proto3,oneof"`
}

type UserAll_TableStart struct {
	TableStart *UserTableStarted `protobuf:"bytes,5,opt,name=table_start,json=tableStart,proto3,oneof"`
}

type UserAll_HandPlayed struct {
	HandPlayed *UserHandPlayed `protobuf:"bytes,6,opt,name=hand_played,json=handPlayed,proto3,oneof"`
}

type UserAll_Bet struct {
	Bet *UserBetMade `protobuf:"bytes,7,opt,name=bet,proto3,oneof"`
}

type UserAll_MoneyWithdraw struct {
	MoneyWithdraw *UserMoneyWithdrawn `protobuf:"bytes,8,opt,name=money_withdraw,json=moneyWithdraw,proto3,oneof"`
}

type UserAll_BonusReceived struct {
	BonusReceived *UserBonusReceived `protobuf:"bytes,9,opt,name=bonus_received,json=bonusReceived,proto3,oneof"`
}

func (*UserAll_Registration) isUserAll_OneofType() {}

func (*UserAll_DocUpload) isUserAll_OneofType() {}

func (*UserAll_Login) isUserAll_OneofType() {}

func (*UserAll_MoneyDeposit) isUserAll_OneofType() {}

func (*UserAll_TableStart) isUserAll_OneofType() {}

func (*UserAll_HandPlayed) isUserAll_OneofType() {}

func (*UserAll_Bet) isUserAll_OneofType() {}

func (*UserAll_MoneyWithdraw) isUserAll_OneofType() {}

func (*UserAll_BonusReceived) isUserAll_OneofType() {}

func (m *UserAll) GetOneofType() isUserAll_OneofType {
	if m != nil {
		return m.OneofType
	}
	return nil
}

func (m *UserAll) GetRegistration() *UserRegistered {
	if x, ok := m.GetOneofType().(*UserAll_Registration); ok {
		return x.Registration
	}
	return nil
}

func (m *UserAll) GetDocUpload() *UserDocumentUploaded {
	if x, ok := m.GetOneofType().(*UserAll_DocUpload); ok {
		return x.DocUpload
	}
	return nil
}

func (m *UserAll) GetLogin() *UserLoggedIn {
	if x, ok := m.GetOneofType().(*UserAll_Login); ok {
		return x.Login
	}
	return nil
}

func (m *UserAll) GetMoneyDeposit() *UserMoneyDeposited {
	if x, ok := m.GetOneofType().(*UserAll_MoneyDeposit); ok {
		return x.MoneyDeposit
	}
	return nil
}

func (m *UserAll) GetTableStart() *UserTableStarted {
	if x, ok := m.GetOneofType().(*UserAll_TableStart); ok {
		return x.TableStart
	}
	return nil
}

func (m *UserAll) GetHandPlayed() *UserHandPlayed {
	if x, ok := m.GetOneofType().(*UserAll_HandPlayed); ok {
		return x.HandPlayed
	}
	return nil
}

func (m *UserAll) GetBet() *UserBetMade {
	if x, ok := m.GetOneofType().(*UserAll_Bet); ok {
		return x.Bet
	}
	return nil
}

func (m *UserAll) GetMoneyWithdraw() *UserMoneyWithdrawn {
	if x, ok := m.GetOneofType().(*UserAll_MoneyWithdraw); ok {
		return x.MoneyWithdraw
	}
	return nil
}

func (m *UserAll) GetBonusReceived() *UserBonusReceived {
	if x, ok := m.GetOneofType().(*UserAll_BonusReceived); ok {
		return x.BonusReceived
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*UserAll) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*UserAll_Registration)(nil),
		(*UserAll_DocUpload)(nil),
		(*UserAll_Login)(nil),
		(*UserAll_MoneyDeposit)(nil),
		(*UserAll_TableStart)(nil),
		(*UserAll_HandPlayed)(nil),
		(*UserAll_Bet)(nil),
		(*UserAll_MoneyWithdraw)(nil),
		(*UserAll_BonusReceived)(nil),
	}
}

func init() {
	proto.RegisterType((*UserAll)(nil), "v1.UserAll")
}

func init() {
	proto.RegisterFile("user_all.proto", fileDescriptor_3088961682bd11de)
}

var fileDescriptor_3088961682bd11de = []byte{
	// 407 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x92, 0x4f, 0x6f, 0xda, 0x30,
	0x18, 0xc6, 0xc7, 0xff, 0x61, 0x18, 0x9b, 0x3c, 0x40, 0x1e, 0xda, 0x61, 0xda, 0x2e, 0x9c, 0x90,
	0xd8, 0x34, 0x6d, 0x3b, 0xac, 0x55, 0x11, 0x07, 0x2a, 0x15, 0xa9, 0xa2, 0x45, 0x3d, 0x5a, 0x0e,
	0x71, 0x21, 0x92, 0x63, 0x47, 0x89, 0x03, 0xe2, 0x33, 0xf4, 0x4b, 0xd7, 0x7e, 0x13, 0xa7, 0x89,
	0xc4, 0xd1, 0xcf, 0xf3, 0xfc, 0x12, 0xbf, 0x8f, 0x5f, 0x34, 0x48, 0x13, 0x1e, 0x53, 0x26, 0xc4,
	0x2c, 0x8a, 0x95, 0x56, 0xb8, 0x7e, 0x9c, 0x4f, 0x46, 0xa0, 0xc5, 0x7c, 0x1f, 0x24, 0x9a, 0xc7,
	0xdc, 0xcf, 0xac, 0xc9, 0x67, 0x90, 0x3d, 0xae, 0x69, 0xc8, 0x7c, 0x9e, 0x8b, 0x5f, 0x32, 0x51,
	0xc9, 0x34, 0x31, 0xc4, 0x8e, 0x07, 0xc7, 0x22, 0xff, 0x15, 0x2c, 0x5f, 0xed, 0xd2, 0x90, 0x4b,
	0x4d, 0xd3, 0x48, 0x28, 0xc3, 0x39, 0x77, 0x0c, 0xee, 0x81, 0x49, 0x9f, 0x46, 0x82, 0x9d, 0x0b,
	0x7d, 0x02, 0x7a, 0xa8, 0x24, 0x3f, 0x53, 0x9f, 0x47, 0x2a, 0x09, 0xf4, 0x45, 0xef, 0x14, 0xe8,
	0x83, 0x1f, 0xb3, 0x93, 0xcc, 0x3d, 0x02, 0x9e, 0x66, 0x9e, 0xe0, 0x34, 0xd1, 0x2c, 0x7e, 0xa3,
	0x86, 0xe0, 0x08, 0xb5, 0xdf, 0x73, 0x9f, 0x06, 0x79, 0xfe, 0xfb, 0x4b, 0x13, 0x75, 0xb6, 0xc6,
	0xb8, 0x11, 0x02, 0xff, 0x45, 0xfd, 0x6c, 0xda, 0x98, 0xe9, 0x40, 0x49, 0x52, 0xfb, 0x56, 0x9b,
	0xf6, 0x7e, 0xe2, 0xd9, 0x71, 0x3e, 0xb3, 0x91, 0x4d, 0xd1, 0xc4, 0xea, 0xdd, 0xa6, 0x92, 0xc4,
	0xff, 0x10, 0x32, 0x03, 0xe6, 0xb3, 0x91, 0x3a, 0x70, 0xc4, 0x71, 0xcb, 0x7c, 0xf4, 0x6d, 0x3e,
	0xb9, 0xa1, 0xbb, 0x26, 0x9d, 0x1d, 0xf1, 0x14, 0xb5, 0xcc, 0x9d, 0x02, 0x49, 0x1a, 0x40, 0x7d,
	0x72, 0xd4, 0x1d, 0x5c, 0xf4, 0x56, 0x9a, 0x74, 0x16, 0xc0, 0xff, 0xd1, 0x87, 0x4a, 0x1f, 0xa4,
	0x09, 0xc4, 0xd8, 0x11, 0x6b, 0x6b, 0x2e, 0x5d, 0x57, 0xf6, 0x8e, 0x61, 0x49, 0xc1, 0x7f, 0x50,
	0xaf, 0x54, 0x0b, 0x69, 0x01, 0x3c, 0x74, 0xf0, 0xa3, 0xb5, 0x1e, 0xb2, 0xc2, 0x0c, 0x8a, 0x74,
	0x71, 0xc6, 0xbf, 0x51, 0xaf, 0xf4, 0x3e, 0xa4, 0x5d, 0x6d, 0x65, 0x65, 0xac, 0x7b, 0x70, 0x2c,
	0x76, 0x28, 0x4e, 0xf8, 0x07, 0x6a, 0x98, 0x25, 0x21, 0x1d, 0x88, 0x7f, 0x74, 0xf1, 0x05, 0xd7,
	0x6b, 0x53, 0x82, 0xc9, 0x5a, 0x17, 0x5f, 0xa3, 0x41, 0xf5, 0x1d, 0xc9, 0xfb, 0x0b, 0x43, 0x3d,
	0xb9, 0x47, 0x36, 0x58, 0xd6, 0x81, 0x53, 0xf0, 0x15, 0x1a, 0x54, 0xb7, 0x8e, 0x74, 0xe1, 0x03,
	0xa3, 0xe2, 0x87, 0xd6, 0xdd, 0xe4, 0xa6, 0xe5, 0xbd, 0xb2, 0xb0, 0xe8, 0x23, 0x64, 0xbe, 0xa7,
	0x9e, 0xa9, 0x3e, 0x47, 0xdc, 0x6b, 0xc3, 0x52, 0xfc, 0x7a, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x37,
	0x79, 0x73, 0x0a, 0x0f, 0x03, 0x00, 0x00,
}
