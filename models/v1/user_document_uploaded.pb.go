// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user_document_uploaded.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type UserDocumentType int32

const (
	UserDocumentType_PASSPORT       UserDocumentType = 0
	UserDocumentType_LICENCE_DRIVER UserDocumentType = 1
)

var UserDocumentType_name = map[int32]string{
	0: "PASSPORT",
	1: "LICENCE_DRIVER",
}

var UserDocumentType_value = map[string]int32{
	"PASSPORT":       0,
	"LICENCE_DRIVER": 1,
}

func (x UserDocumentType) String() string {
	return proto.EnumName(UserDocumentType_name, int32(x))
}

func (UserDocumentType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_707d97119f6c4614, []int{0}
}

type UserDocumentUploaded struct {
	Uid                  string               `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Did                  string               `protobuf:"bytes,2,opt,name=did,proto3" json:"did,omitempty"`
	Url                  string               `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
	DocType              UserDocumentType     `protobuf:"varint,4,opt,name=doc_type,json=docType,proto3,enum=v1.UserDocumentType" json:"doc_type,omitempty"`
	UploadedTs           *timestamp.Timestamp `protobuf:"bytes,5,opt,name=uploaded_ts,json=uploadedTs,proto3" json:"uploaded_ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UserDocumentUploaded) Reset()         { *m = UserDocumentUploaded{} }
func (m *UserDocumentUploaded) String() string { return proto.CompactTextString(m) }
func (*UserDocumentUploaded) ProtoMessage()    {}
func (*UserDocumentUploaded) Descriptor() ([]byte, []int) {
	return fileDescriptor_707d97119f6c4614, []int{0}
}

func (m *UserDocumentUploaded) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserDocumentUploaded.Unmarshal(m, b)
}
func (m *UserDocumentUploaded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserDocumentUploaded.Marshal(b, m, deterministic)
}
func (m *UserDocumentUploaded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserDocumentUploaded.Merge(m, src)
}
func (m *UserDocumentUploaded) XXX_Size() int {
	return xxx_messageInfo_UserDocumentUploaded.Size(m)
}
func (m *UserDocumentUploaded) XXX_DiscardUnknown() {
	xxx_messageInfo_UserDocumentUploaded.DiscardUnknown(m)
}

var xxx_messageInfo_UserDocumentUploaded proto.InternalMessageInfo

func (m *UserDocumentUploaded) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *UserDocumentUploaded) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *UserDocumentUploaded) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *UserDocumentUploaded) GetDocType() UserDocumentType {
	if m != nil {
		return m.DocType
	}
	return UserDocumentType_PASSPORT
}

func (m *UserDocumentUploaded) GetUploadedTs() *timestamp.Timestamp {
	if m != nil {
		return m.UploadedTs
	}
	return nil
}

func init() {
	proto.RegisterEnum("v1.UserDocumentType", UserDocumentType_name, UserDocumentType_value)
	proto.RegisterType((*UserDocumentUploaded)(nil), "v1.UserDocumentUploaded")
}

func init() {
	proto.RegisterFile("user_document_uploaded.proto", fileDescriptor_707d97119f6c4614)
}

var fileDescriptor_707d97119f6c4614 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x29, 0x2d, 0x4e, 0x2d,
	0x8a, 0x4f, 0xc9, 0x4f, 0x2e, 0xcd, 0x4d, 0xcd, 0x2b, 0x89, 0x2f, 0x2d, 0xc8, 0xc9, 0x4f, 0x4c,
	0x49, 0x4d, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x33, 0x94, 0x92, 0x4f, 0xcf,
	0xcf, 0x4f, 0xcf, 0x49, 0xd5, 0x07, 0x8b, 0x24, 0x95, 0xa6, 0xe9, 0x97, 0x64, 0xe6, 0xa6, 0x16,
	0x97, 0x24, 0xe6, 0x16, 0x40, 0x14, 0x29, 0xed, 0x62, 0xe4, 0x12, 0x09, 0x05, 0x9a, 0xe2, 0x02,
	0x35, 0x24, 0x14, 0x6a, 0x86, 0x90, 0x00, 0x17, 0x73, 0x69, 0x66, 0x8a, 0x04, 0xa3, 0x02, 0xa3,
	0x06, 0x67, 0x10, 0x88, 0x09, 0x12, 0x49, 0x01, 0x8a, 0x30, 0x41, 0x44, 0x52, 0x20, 0x22, 0xa5,
	0x45, 0x39, 0x12, 0xcc, 0x50, 0x35, 0x45, 0x39, 0x42, 0xfa, 0x5c, 0x1c, 0x40, 0xe7, 0xc4, 0x97,
	0x54, 0x16, 0xa4, 0x4a, 0xb0, 0x00, 0x85, 0xf9, 0x8c, 0x44, 0xf4, 0xca, 0x0c, 0xf5, 0x90, 0x6d,
	0x08, 0x01, 0xca, 0x05, 0xb1, 0x03, 0x55, 0x81, 0x18, 0x42, 0xd6, 0x5c, 0xdc, 0x30, 0x67, 0xc7,
	0x97, 0x14, 0x4b, 0xb0, 0x02, 0xf5, 0x70, 0x1b, 0x49, 0xe9, 0x41, 0x9c, 0xad, 0x07, 0x73, 0xb6,
	0x5e, 0x08, 0xcc, 0xd9, 0x41, 0x5c, 0x30, 0xe5, 0x21, 0xc5, 0x5a, 0x26, 0x5c, 0x02, 0xe8, 0x26,
	0x0b, 0xf1, 0x70, 0x71, 0x04, 0x38, 0x06, 0x07, 0x07, 0xf8, 0x07, 0x85, 0x08, 0x30, 0x08, 0x09,
	0x71, 0xf1, 0xf9, 0x78, 0x3a, 0xbb, 0xfa, 0x39, 0xbb, 0xc6, 0xbb, 0x04, 0x79, 0x86, 0xb9, 0x06,
	0x09, 0x30, 0x26, 0xb1, 0x81, 0x4d, 0x35, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x78, 0x86, 0xc1,
	0xe0, 0x3e, 0x01, 0x00, 0x00,
}
