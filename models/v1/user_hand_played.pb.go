// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user_hand_played.proto

package v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PokerHandRank int32

const (
	PokerHandRank_NONE            PokerHandRank = 0
	PokerHandRank_ROYAL_FLUSH     PokerHandRank = 1
	PokerHandRank_STRAIGHT_FLUSH  PokerHandRank = 2
	PokerHandRank_FOUR_OF_A_KIND  PokerHandRank = 3
	PokerHandRank_FULL_HOUSE      PokerHandRank = 4
	PokerHandRank_FLUSH           PokerHandRank = 5
	PokerHandRank_STRAIGHT        PokerHandRank = 6
	PokerHandRank_THREE_OF_A_KIND PokerHandRank = 7
	PokerHandRank_TWO_PAIR        PokerHandRank = 8
	PokerHandRank_PAIR            PokerHandRank = 9
	PokerHandRank_HIGH_CARD       PokerHandRank = 10
)

var PokerHandRank_name = map[int32]string{
	0:  "NONE",
	1:  "ROYAL_FLUSH",
	2:  "STRAIGHT_FLUSH",
	3:  "FOUR_OF_A_KIND",
	4:  "FULL_HOUSE",
	5:  "FLUSH",
	6:  "STRAIGHT",
	7:  "THREE_OF_A_KIND",
	8:  "TWO_PAIR",
	9:  "PAIR",
	10: "HIGH_CARD",
}

var PokerHandRank_value = map[string]int32{
	"NONE":            0,
	"ROYAL_FLUSH":     1,
	"STRAIGHT_FLUSH":  2,
	"FOUR_OF_A_KIND":  3,
	"FULL_HOUSE":      4,
	"FLUSH":           5,
	"STRAIGHT":        6,
	"THREE_OF_A_KIND": 7,
	"TWO_PAIR":        8,
	"PAIR":            9,
	"HIGH_CARD":       10,
}

func (x PokerHandRank) String() string {
	return proto.EnumName(PokerHandRank_name, int32(x))
}

func (PokerHandRank) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_fbf39cb5ab6d5656, []int{0}
}

type UserHandPlayed struct {
	Pid                  string               `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Uid                  string               `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	Tid                  string               `protobuf:"bytes,3,opt,name=tid,proto3" json:"tid,omitempty"`
	PlayedAtTs           *timestamp.Timestamp `protobuf:"bytes,4,opt,name=played_at_ts,json=playedAtTs,proto3" json:"played_at_ts,omitempty"`
	CardHand             []string             `protobuf:"bytes,5,rep,name=card_hand,json=cardHand,proto3" json:"card_hand,omitempty"`
	Rank                 PokerHandRank        `protobuf:"varint,6,opt,name=rank,proto3,enum=v1.PokerHandRank" json:"rank,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *UserHandPlayed) Reset()         { *m = UserHandPlayed{} }
func (m *UserHandPlayed) String() string { return proto.CompactTextString(m) }
func (*UserHandPlayed) ProtoMessage()    {}
func (*UserHandPlayed) Descriptor() ([]byte, []int) {
	return fileDescriptor_fbf39cb5ab6d5656, []int{0}
}

func (m *UserHandPlayed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserHandPlayed.Unmarshal(m, b)
}
func (m *UserHandPlayed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserHandPlayed.Marshal(b, m, deterministic)
}
func (m *UserHandPlayed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserHandPlayed.Merge(m, src)
}
func (m *UserHandPlayed) XXX_Size() int {
	return xxx_messageInfo_UserHandPlayed.Size(m)
}
func (m *UserHandPlayed) XXX_DiscardUnknown() {
	xxx_messageInfo_UserHandPlayed.DiscardUnknown(m)
}

var xxx_messageInfo_UserHandPlayed proto.InternalMessageInfo

func (m *UserHandPlayed) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *UserHandPlayed) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *UserHandPlayed) GetTid() string {
	if m != nil {
		return m.Tid
	}
	return ""
}

func (m *UserHandPlayed) GetPlayedAtTs() *timestamp.Timestamp {
	if m != nil {
		return m.PlayedAtTs
	}
	return nil
}

func (m *UserHandPlayed) GetCardHand() []string {
	if m != nil {
		return m.CardHand
	}
	return nil
}

func (m *UserHandPlayed) GetRank() PokerHandRank {
	if m != nil {
		return m.Rank
	}
	return PokerHandRank_NONE
}

func init() {
	proto.RegisterEnum("v1.PokerHandRank", PokerHandRank_name, PokerHandRank_value)
	proto.RegisterType((*UserHandPlayed)(nil), "v1.UserHandPlayed")
}

func init() {
	proto.RegisterFile("user_hand_played.proto", fileDescriptor_fbf39cb5ab6d5656)
}

var fileDescriptor_fbf39cb5ab6d5656 = []byte{
	// 343 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x54, 0x90, 0xcb, 0x4e, 0x83, 0x40,
	0x14, 0x86, 0xa5, 0xd0, 0x0a, 0xa7, 0x2d, 0x1d, 0xc7, 0xc4, 0x90, 0xba, 0xb0, 0x31, 0x31, 0x31,
	0x2e, 0x68, 0x5a, 0xb7, 0x6e, 0x88, 0x05, 0x69, 0x24, 0xa5, 0x99, 0x42, 0x8c, 0xab, 0x09, 0x15,
	0xac, 0x4d, 0x2f, 0x10, 0x2e, 0x4d, 0x7c, 0x32, 0x5f, 0xc1, 0xc7, 0x72, 0x86, 0xb1, 0x89, 0xee,
	0x4e, 0xbe, 0xf3, 0xff, 0x87, 0x8f, 0x81, 0x8b, 0xaa, 0x48, 0x72, 0xfa, 0x11, 0xed, 0x63, 0x9a,
	0x6d, 0xa3, 0xcf, 0x24, 0x36, 0xb3, 0x3c, 0x2d, 0x53, 0xdc, 0x38, 0x8c, 0xfa, 0x57, 0xab, 0x34,
	0x5d, 0x6d, 0x93, 0x61, 0x4d, 0x96, 0xd5, 0xfb, 0xb0, 0x5c, 0xef, 0x92, 0xa2, 0x8c, 0x76, 0x99,
	0x08, 0x5d, 0x7f, 0x4b, 0xa0, 0x87, 0xac, 0xef, 0xb2, 0xfa, 0xbc, 0x6e, 0x63, 0x04, 0x72, 0xb6,
	0x8e, 0x0d, 0x69, 0x20, 0xdd, 0x6a, 0x84, 0x8f, 0x9c, 0x54, 0x8c, 0x34, 0x04, 0xa9, 0x04, 0x29,
	0x19, 0x91, 0x05, 0x61, 0x23, 0x7e, 0x80, 0x8e, 0xf8, 0x3a, 0x8d, 0x4a, 0x5a, 0x16, 0x86, 0xc2,
	0x56, 0xed, 0x71, 0xdf, 0x14, 0x02, 0xe6, 0x51, 0xc0, 0x0c, 0x8e, 0x02, 0x04, 0x44, 0xde, 0x2a,
	0x83, 0x02, 0x5f, 0x82, 0xf6, 0x16, 0xe5, 0x71, 0xfd, 0x17, 0x46, 0x73, 0x20, 0xb3, 0xab, 0x2a,
	0x07, 0x5c, 0x0b, 0xdf, 0x80, 0x92, 0x47, 0xfb, 0x8d, 0xd1, 0x62, 0x27, 0xf5, 0xf1, 0x99, 0x79,
	0x18, 0x99, 0xf3, 0x74, 0x23, 0x9c, 0x09, 0x5b, 0x90, 0x7a, 0x7d, 0xf7, 0x25, 0x41, 0xf7, 0x1f,
	0xc7, 0x2a, 0x28, 0x33, 0x7f, 0x66, 0xa3, 0x13, 0xdc, 0x83, 0x36, 0xf1, 0x5f, 0x2d, 0x8f, 0x3a,
	0x5e, 0xb8, 0x70, 0x91, 0x84, 0x31, 0xe8, 0x8b, 0x80, 0x58, 0xd3, 0x27, 0x37, 0xf8, 0x65, 0x0d,
	0xce, 0x1c, 0x3f, 0x24, 0xd4, 0x77, 0xa8, 0x45, 0x9f, 0xa7, 0xb3, 0x09, 0x92, 0xb1, 0x0e, 0xe0,
	0x84, 0x9e, 0x47, 0x5d, 0x3f, 0x5c, 0xd8, 0x48, 0xc1, 0x1a, 0x34, 0x45, 0xbc, 0x89, 0x3b, 0xa0,
	0x1e, 0x4f, 0xa0, 0x16, 0x3e, 0x87, 0x5e, 0xe0, 0x12, 0xdb, 0xfe, 0xd3, 0x3e, 0xe5, 0x91, 0xe0,
	0xc5, 0xa7, 0x73, 0x6b, 0x4a, 0x90, 0xca, 0x75, 0xea, 0x49, 0xc3, 0x5d, 0xd0, 0x5c, 0xd6, 0xa3,
	0x8f, 0x16, 0x99, 0x20, 0x58, 0xb6, 0xea, 0xd7, 0xb9, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x05,
	0xd7, 0x34, 0xa8, 0xca, 0x01, 0x00, 0x00,
}
